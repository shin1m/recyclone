cmake_minimum_required(VERSION 3.10)
project(recyclone)

set(THREADS_PREFER_PTHREAD_FLAG TRUE)
find_package(Threads REQUIRED)
include(CheckCXXCompilerFlag)
check_cxx_compiler_flag(-g CXX_COVERAGE)

add_library(recyclone INTERFACE)
target_compile_features(recyclone INTERFACE cxx_std_17)
target_include_directories(recyclone INTERFACE include)
if(EMSCRIPTEN)
	target_compile_definitions(recyclone INTERFACE RECYCLONE__COOPERATIVE)
	target_compile_options(recyclone INTERFACE "-fexceptions;-pthread")
	target_link_libraries(recyclone INTERFACE "-pthread;-s NO_DISABLE_EXCEPTION_CATCHING;-s PROXY_TO_PTHREAD;-s ALLOW_MEMORY_GROWTH")
else()
	target_link_libraries(recyclone INTERFACE Threads::Threads)
endif()

enable_testing()
function(do_test_from name source)
	add_executable(test_${name} test/test_${source}.cc)
	if(EMSCRIPTEN)
		target_compile_definitions(test_${name} PRIVATE RECYCLONE__STACK_LIMIT=0x400000)
		target_compile_options(test_${name} PRIVATE "-g")
		target_link_libraries(test_${name} recyclone "-g;-s EXIT_RUNTIME")
		add_test(NAME ${name} COMMAND node --experimental-wasm-threads test_${name}.js)
		add_test(NAME ${name}-collect COMMAND node --experimental-wasm-threads test_${name}.js 0)
	else()
		target_compile_options(test_${name} PRIVATE "$<$<BOOL:${CXX_COVERAGE}>:-g;--coverage>")
		target_link_libraries(test_${name} recyclone "$<$<BOOL:${CXX_COVERAGE}>:--coverage>")
		add_test(NAME ${name} COMMAND test_${name})
		add_test(NAME ${name}-collect COMMAND test_${name} 0)
	endif()
endfunction()
function(do_test name)
	do_test_from(${name} ${name})
	if(NOT EMSCRIPTEN)
		do_test_from(${name}-co ${name})
		target_compile_definitions(test_${name}-co PRIVATE RECYCLONE__COOPERATIVE)
	endif()
endfunction()
do_test(empty)
do_test(collector)
do_test(cyclic)
do_test(large)
do_test(threads)
do_test(finalizer)
do_test(background)
do_test(monitor)
do_test(weak_pointer)
do_test(type_object)
